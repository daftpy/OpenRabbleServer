services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    env_file: "./postgres/.env.dev"
    ports:
    - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 5s
      retries: 5
  
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    # Flags for reverse proxy
    command:
      - start-dev
      - --proxy-headers=xforwarded
      - --import-realm
    env_file: "./keycloak/.env.dev"
    volumes:
      - ./keycloak/chat-realm.dev.json:/opt/keycloak/data/import/chat-realm.json
      - ./keycloak/exported-realms:/opt/keycloak/export # for exporting realm configs
    networks:
      - app_network
    expose:
      - "8080"
    depends_on:
      - postgres

  chatserver:
    build:
      context: ./chatserver
      dockerfile: dockerfile
    networks:
      - app_network
    expose:
      - "8080"
    env_file: 
     - ".env.dev"
     - "./keycloak/.env.dev"
    depends_on:
      postgres:
        condition: service_healthy
      valkey:
        condition: service_started

  valkey:
    image: valkey/valkey:latest
    ports:
      - "6380:6379"
    networks:
      - app_network
    volumes:
      - valkey_data:/data
    command: ["valkey-server", "--loglevel", "warning"]

      
  caddy:
    image: caddy:latest
    restart: unless-stopped
    networks:
      - app_network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile.dev:/etc/caddy/Caddyfile:ro
      - ./caddy/caddy_data:/data

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    networks:
      - app_network
    ports:
      - "3000:3000"
    depends_on:
      - caddy
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "1"
      WATCHPACK_POLLING: "true"
      NODE_TLS_REJECT_UNAUTHORIZED: 0
    volumes:
      - ./web:/app
      - /app/node_modules
    extra_hosts:
      - "chat.localhost:172.17.0.1" 

volumes:
  postgres_data:
  valkey_data:

networks:
  app_network:
    driver: bridge
